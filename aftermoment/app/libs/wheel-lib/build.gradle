ext {
    def props = new Properties()
    new File(project.rootDir, 'build.properties').withInputStream {
        stream -> props.load(stream)
    }

    appId = props.getProperty("app.package", "")
    verName = props.getProperty("version.name", "")
    verCode = props.getProperty("version.code", "").toInteger()

    buildTools = props.getProperty("build.tools", "19.1.0")

    minSdk = props.getProperty("sdk.min", "9").toInteger()
    targetSdk = props.getProperty("sdk.target", "19").toInteger()

    // Jenkine로 빌드하는 경우 BUILD_NUMBER를 Version Code로 사용한다.
    buildNumber = "$System.env.BUILD_NUMBER"
    if (buildNumber.toString().size() > 0 && buildNumber.isInteger()) verCode = buildNumber.toInteger()

    print "PackageName: " + appId + "\n"
    print "Version: " + verName + " (" + verCode + ")\n"

    if (appId.length() < 1) throw new GradleException('Package Name Empty !!!')
    if (verName.length() < 1) throw new GradleException('Version Name Empty !!!')
    if (verCode < 1) throw new GradleException('Invalid version Code !!!')
}

apply plugin: 'com.android.library'

android {
    compileSdkVersion targetSdk
    buildToolsVersion buildTools

    defaultConfig {
        minSdkVersion minSdk
        targetSdkVersion targetSdk
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
}
